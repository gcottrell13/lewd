//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from lewd.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class lewdParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, StringLiteral=12, SYMBOL_TEXT=13, NUMBER_TEXT=14, PERIOD=15, 
		STRING=16, WS=17, COMMENT=18;
	public const int
		RULE_document = 0, RULE_docLevelExpression = 1, RULE_expression = 2, RULE_assignment = 3, 
		RULE_assignmentLHS = 4, RULE_assignmentRHS = 5, RULE_functionCall = 6, 
		RULE_functionDef = 7, RULE_functionBody = 8, RULE_parameter = 9, RULE_constant = 10, 
		RULE_collection = 11, RULE_number = 12, RULE_symbol = 13, RULE_record = 14, 
		RULE_str = 15, RULE_recordEntry = 16, RULE_truefalse = 17, RULE_name = 18;
	public static readonly string[] ruleNames = {
		"document", "docLevelExpression", "expression", "assignment", "assignmentLHS", 
		"assignmentRHS", "functionCall", "functionDef", "functionBody", "parameter", 
		"constant", "collection", "number", "symbol", "record", "str", "recordEntry", 
		"truefalse", "name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'('", "')'", "'=>'", "'['", "']'", "'{'", "'}'", "'->'", 
		"'true'", "'false'", null, null, null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"StringLiteral", "SYMBOL_TEXT", "NUMBER_TEXT", "PERIOD", "STRING", "WS", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "lewd.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static lewdParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public lewdParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public lewdParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DocumentContext : ParserRuleContext {
		public DocLevelExpressionContext[] docLevelExpression() {
			return GetRuleContexts<DocLevelExpressionContext>();
		}
		public DocLevelExpressionContext docLevelExpression(int i) {
			return GetRuleContext<DocLevelExpressionContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(lewdParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(lewdParser.WS, i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYMBOL_TEXT) {
				{
				State = 38; docLevelExpression();
				}
			}

			State = 45;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 41; Match(WS);
					State = 42; docLevelExpression();
					}
					} 
				}
				State = 47;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 48; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DocLevelExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public DocLevelExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_docLevelExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterDocLevelExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitDocLevelExpression(this);
		}
	}

	[RuleVersion(0)]
	public DocLevelExpressionContext docLevelExpression() {
		DocLevelExpressionContext _localctx = new DocLevelExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_docLevelExpression);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionDefContext functionDef() {
			return GetRuleContext<FunctionDefContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55; constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56; functionCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 57; functionDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentLHSContext assignmentLHS() {
			return GetRuleContext<AssignmentLHSContext>(0);
		}
		public AssignmentRHSContext assignmentRHS() {
			return GetRuleContext<AssignmentRHSContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(lewdParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(lewdParser.WS, i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; assignmentLHS();
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 61; Match(WS);
				}
			}

			State = 64; Match(T__0);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 65; Match(WS);
				}
			}

			State = 68; assignmentRHS();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentLHSContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public AssignmentLHSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentLHS; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterAssignmentLHS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitAssignmentLHS(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentLHSContext assignmentLHS() {
		AssignmentLHSContext _localctx = new AssignmentLHSContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignmentLHS);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentRHSContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionDefContext functionDef() {
			return GetRuleContext<FunctionDefContext>(0);
		}
		public AssignmentRHSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentRHS; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterAssignmentRHS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitAssignmentRHS(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentRHSContext assignmentRHS() {
		AssignmentRHSContext _localctx = new AssignmentRHSContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignmentRHS);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 72; expression();
				}
				break;
			case 2:
				{
				State = 73; functionDef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(lewdParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(lewdParser.WS, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; name();
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 77; Match(WS);
				}
			}

			State = 80; Match(T__1);
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 81; Match(WS);
				}
				break;
			}
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << T__9) | (1L << T__10) | (1L << StringLiteral) | (1L << SYMBOL_TEXT) | (1L << NUMBER_TEXT))) != 0)) {
				{
				State = 84; expression();
				}
			}

			State = 91;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 87; Match(WS);
					State = 88; expression();
					}
					} 
				}
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 94; Match(WS);
				}
			}

			State = 97; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefContext : ParserRuleContext {
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(lewdParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(lewdParser.WS, i);
		}
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public FunctionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterFunctionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitFunctionDef(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefContext functionDef() {
		FunctionDefContext _localctx = new FunctionDefContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionDef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(T__1);
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 100; Match(WS);
				}
				break;
			}
			State = 108;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 103; parameter();
					State = 104; Match(WS);
					}
					} 
				}
				State = 110;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYMBOL_TEXT) {
				{
				State = 111; parameter();
				}
			}

			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 114; Match(WS);
				}
			}

			State = 117; Match(T__2);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 118; Match(WS);
				}
			}

			State = 121; Match(T__3);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 122; Match(WS);
				}
			}

			State = 125; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode SYMBOL_TEXT() { return GetToken(lewdParser.SYMBOL_TEXT, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(SYMBOL_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public RecordContext record() {
			return GetRuleContext<RecordContext>(0);
		}
		public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public TruefalseContext truefalse() {
			return GetRuleContext<TruefalseContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 20, RULE_constant);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; collection();
				}
				break;
			case NUMBER_TEXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; number();
				}
				break;
			case SYMBOL_TEXT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133; symbol();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 4);
				{
				State = 134; record();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135; str();
				}
				break;
			case T__9:
			case T__10:
				EnterOuterAlt(_localctx, 6);
				{
				State = 136; truefalse();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(lewdParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(lewdParser.WS, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 22, RULE_collection);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(T__4);
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 140; Match(WS);
				}
				break;
			}
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << T__9) | (1L << T__10) | (1L << StringLiteral) | (1L << SYMBOL_TEXT) | (1L << NUMBER_TEXT))) != 0)) {
				{
				State = 143; expression();
				}
			}

			State = 150;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 146; Match(WS);
					State = 147; expression();
					}
					} 
				}
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 153; Match(WS);
				}
			}

			State = 156; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode NUMBER_TEXT() { return GetToken(lewdParser.NUMBER_TEXT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 24, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(NUMBER_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		public ITerminalNode SYMBOL_TEXT() { return GetToken(lewdParser.SYMBOL_TEXT, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 26, RULE_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(SYMBOL_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(lewdParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(lewdParser.WS, i);
		}
		public RecordEntryContext[] recordEntry() {
			return GetRuleContexts<RecordEntryContext>();
		}
		public RecordEntryContext recordEntry(int i) {
			return GetRuleContext<RecordEntryContext>(i);
		}
		public RecordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterRecord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitRecord(this);
		}
	}

	[RuleVersion(0)]
	public RecordContext record() {
		RecordContext _localctx = new RecordContext(Context, State);
		EnterRule(_localctx, 28, RULE_record);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(T__6);
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 163; Match(WS);
				}
				break;
			}
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << T__6) | (1L << T__9) | (1L << T__10) | (1L << StringLiteral) | (1L << SYMBOL_TEXT) | (1L << NUMBER_TEXT))) != 0)) {
				{
				State = 166; recordEntry();
				}
			}

			State = 173;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 169; Match(WS);
					State = 170; recordEntry();
					}
					} 
				}
				State = 175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 176; Match(WS);
				}
			}

			State = 179; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(lewdParser.StringLiteral, 0); }
		public StrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_str; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitStr(this);
		}
	}

	[RuleVersion(0)]
	public StrContext str() {
		StrContext _localctx = new StrContext(Context, State);
		EnterRule(_localctx, 30, RULE_str);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordEntryContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(lewdParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(lewdParser.WS, i);
		}
		public RecordEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordEntry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterRecordEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitRecordEntry(this);
		}
	}

	[RuleVersion(0)]
	public RecordEntryContext recordEntry() {
		RecordEntryContext _localctx = new RecordEntryContext(Context, State);
		EnterRule(_localctx, 32, RULE_recordEntry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; expression();
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 184; Match(WS);
				}
			}

			State = 187; Match(T__8);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 188; Match(WS);
				}
			}

			State = 191; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruefalseContext : ParserRuleContext {
		public TruefalseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truefalse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterTruefalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitTruefalse(this);
		}
	}

	[RuleVersion(0)]
	public TruefalseContext truefalse() {
		TruefalseContext _localctx = new TruefalseContext(Context, State);
		EnterRule(_localctx, 34, RULE_truefalse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			_la = TokenStream.LA(1);
			if ( !(_la==T__9 || _la==T__10) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IlewdListener typedListener = listener as IlewdListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 36, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', '\xC8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x5', '\x2', '*', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '.', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x31', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\x34', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x38', 
		'\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '=', 
		'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x41', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x45', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', 'M', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'Q', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'U', '\n', '\b', '\x3', 
		'\b', '\x5', '\b', 'X', '\n', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'\\', '\n', '\b', '\f', '\b', '\xE', '\b', '_', '\v', '\b', '\x3', '\b', 
		'\x5', '\b', '\x62', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', 'h', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', 'm', '\n', '\t', '\f', '\t', '\xE', '\t', 'p', '\v', 
		'\t', '\x3', '\t', '\x5', '\t', 's', '\n', '\t', '\x3', '\t', '\x5', '\t', 
		'v', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'z', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '~', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\x8C', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x90', 
		'\n', '\r', '\x3', '\r', '\x5', '\r', '\x93', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\a', '\r', '\x97', '\n', '\r', '\f', '\r', '\xE', '\r', 
		'\x9A', '\v', '\r', '\x3', '\r', '\x5', '\r', '\x9D', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xA7', '\n', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xAA', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\xAE', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xB1', 
		'\v', '\x10', '\x3', '\x10', '\x5', '\x10', '\xB4', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\xBC', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\xC0', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x2', 
		'\x2', '\x15', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '\x2', 
		'\x3', '\x3', '\x2', '\f', '\r', '\x2', '\xD7', '\x2', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x37', '\x3', '\x2', '\x2', '\x2', '\x6', '<', '\x3', 
		'\x2', '\x2', '\x2', '\b', '>', '\x3', '\x2', '\x2', '\x2', '\n', 'H', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'L', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'N', '\x3', '\x2', '\x2', '\x2', '\x10', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x81', '\x3', '\x2', '\x2', '\x2', '\x14', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xB7', '\x3', '\x2', '\x2', '\x2', '\"', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xC3', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x5', '\x4', '\x3', '\x2', 
		')', '(', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', 
		'*', '/', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\x13', '\x2', '\x2', 
		',', '.', '\x5', '\x4', '\x3', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x34', '\a', '\x13', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x38', '\x5', '\b', '\x5', '\x2', '\x36', 
		'\x38', '\x5', '\xE', '\b', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '=', '\x5', '\x16', '\f', '\x2', ':', '=', 
		'\x5', '\xE', '\b', '\x2', ';', '=', '\x5', '\x10', '\t', '\x2', '<', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', 
		'<', ';', '\x3', '\x2', '\x2', '\x2', '=', '\a', '\x3', '\x2', '\x2', 
		'\x2', '>', '@', '\x5', '\n', '\x6', '\x2', '?', '\x41', '\a', '\x13', 
		'\x2', '\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x44', '\a', '\x3', '\x2', '\x2', '\x43', '\x45', '\a', '\x13', '\x2', 
		'\x2', '\x44', '\x43', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\x5', '\f', '\a', '\x2', 'G', '\t', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\x5', '&', '\x14', '\x2', 'I', '\v', '\x3', '\x2', '\x2', '\x2', 
		'J', 'M', '\x5', '\x6', '\x4', '\x2', 'K', 'M', '\x5', '\x10', '\t', '\x2', 
		'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 
		'M', '\r', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x5', '&', '\x14', '\x2', 
		'O', 'Q', '\a', '\x13', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'T', '\a', '\x4', '\x2', '\x2', 'S', 'U', '\a', '\x13', '\x2', '\x2', 
		'T', 'S', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 
		'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\x5', '\x6', '\x4', '\x2', 
		'W', 'V', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 
		'X', ']', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\x13', '\x2', '\x2', 
		'Z', '\\', '\x5', '\x6', '\x4', '\x2', '[', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\\', '_', '\x3', '\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', 
		'\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '`', '\x62', 
		'\a', '\x13', '\x2', '\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x64', '\a', '\x5', '\x2', '\x2', '\x64', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x65', 'g', '\a', '\x4', '\x2', '\x2', '\x66', 'h', 
		'\a', '\x13', '\x2', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'g', 
		'h', '\x3', '\x2', '\x2', '\x2', 'h', 'n', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\x5', '\x14', '\v', '\x2', 'j', 'k', '\a', '\x13', '\x2', '\x2', 
		'k', 'm', '\x3', '\x2', '\x2', '\x2', 'l', 'i', '\x3', '\x2', '\x2', '\x2', 
		'm', 'p', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', '\x2', '\x2', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\x5', '\x14', '\v', '\x2', 
		'r', 'q', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', 'u', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\a', '\x13', '\x2', '\x2', 
		'u', 't', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\a', '\x5', '\x2', '\x2', 
		'x', 'z', '\a', '\x13', '\x2', '\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', 
		'{', '}', '\a', '\x6', '\x2', '\x2', '|', '~', '\a', '\x13', '\x2', '\x2', 
		'}', '|', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x5', '\x12', 
		'\n', '\x2', '\x80', '\x11', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', 
		'\x5', '\x6', '\x4', '\x2', '\x82', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x84', '\a', '\xF', '\x2', '\x2', '\x84', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x8C', '\x5', '\x18', '\r', '\x2', '\x86', '\x8C', 
		'\x5', '\x1A', '\xE', '\x2', '\x87', '\x8C', '\x5', '\x1C', '\xF', '\x2', 
		'\x88', '\x8C', '\x5', '\x1E', '\x10', '\x2', '\x89', '\x8C', '\x5', ' ', 
		'\x11', '\x2', '\x8A', '\x8C', '\x5', '$', '\x13', '\x2', '\x8B', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8F', '\a', '\a', '\x2', '\x2', '\x8E', '\x90', '\a', '\x13', 
		'\x2', '\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x93', '\x5', '\x6', '\x4', '\x2', '\x92', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', '\x13', '\x2', '\x2', 
		'\x95', '\x97', '\x5', '\x6', '\x4', '\x2', '\x96', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9D', '\a', '\x13', '\x2', '\x2', '\x9C', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', '\b', 
		'\x2', '\x2', '\x9F', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', 
		'\a', '\x10', '\x2', '\x2', '\xA1', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA3', '\a', '\xF', '\x2', '\x2', '\xA3', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\xA6', '\a', '\t', '\x2', '\x2', '\xA5', '\xA7', 
		'\a', '\x13', '\x2', '\x2', '\xA6', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xAA', '\x5', '\"', '\x12', '\x2', '\xA9', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', '\x13', 
		'\x2', '\x2', '\xAC', '\xAE', '\x5', '\"', '\x12', '\x2', '\xAD', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB4', '\a', '\x13', '\x2', '\x2', 
		'\xB3', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', 
		'\a', '\n', '\x2', '\x2', '\xB6', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB8', '\a', '\xE', '\x2', '\x2', '\xB8', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBB', '\x5', '\x6', '\x4', '\x2', '\xBA', '\xBC', 
		'\a', '\x13', '\x2', '\x2', '\xBB', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xBF', '\a', '\v', '\x2', '\x2', '\xBE', '\xC0', 
		'\a', '\x13', '\x2', '\x2', '\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', 
		'\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xC2', '\x5', '\x6', '\x4', '\x2', '\xC2', '#', 
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\t', '\x2', '\x2', '\x2', 
		'\xC4', '%', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x1C', 
		'\xF', '\x2', '\xC6', '\'', '\x3', '\x2', '\x2', '\x2', ' ', ')', '/', 
		'\x33', '\x37', '<', '@', '\x44', 'L', 'P', 'T', 'W', ']', '\x61', 'g', 
		'n', 'r', 'u', 'y', '}', '\x8B', '\x8F', '\x92', '\x98', '\x9C', '\xA6', 
		'\xA9', '\xAF', '\xB3', '\xBB', '\xBF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
